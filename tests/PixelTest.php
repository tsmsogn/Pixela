<?php

namespace Pixela\Test;

use Pixela\Api\Graphs;
use Pixela\Api\User;
use Pixela\Api\Webhooks;
use Pixela\Client;

class PixelTest extends PixelaTestCase
{
    /**
     * @var \Pixela\ClientInterface
     */
    public $client;

    /**
     * @var \Pixela\Api\User
     */
    public $user;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->client = new Client(self::USERNAME, self::TOKEN);

        $this->user = $this->client->api('User');
        $this->user->create();
    }

    protected function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub

        $this->user->delete();
    }

    /**
     * @return void
     * @throws \GuzzleHttp\Exception\GuzzleException
     */
    public function testCRUD()
    {
        /** @var \Pixela\Api\Graphs $graph */
        $graph = $this->client->api('Graphs');
        $graph->setId('test-graph')
            ->setName('graph-name')
            ->setUnit('commit')
            ->setType('int')
            ->setColor('shibafu');
        $this->assertTrue($graph->create());

        /** @var \Pixela\Api\Pixel $pixel */
        $pixel = $this->client->api('Pixel');
        $pixel->setGraphID('test-graph')
            ->setDatetime(new \DateTime())
            ->setQuantity(1);

        // Create pixel
        $this->assertTrue($pixel->post());

        // Test
        $saved = $pixel->get();
        $this->assertEquals($pixel, $saved);

        // Update pixel
        $pixel->setQuantity(10)
            ->setOptionalData(json_encode('foo'));
        $this->assertTrue($pixel->update());

        // Test
        $saved = $pixel->get();
        $this->assertEquals($pixel, $saved);

        // Increment pixel
        $pixel->increment();
        $saved = $pixel->get();
        $this->assertEquals(11, $pixel->getQuantity());
        $this->assertEquals($pixel->getQuantity(), $saved->getQuantity());

        // Decrement pixel
        $pixel->decrement();
        $saved = $pixel->get();
        $this->assertEquals(10, $pixel->getQuantity());
        $this->assertEquals($pixel->getQuantity(), $saved->getQuantity());

        // Delete pixel
        $this->assertTrue($pixel->delete());
    }
}